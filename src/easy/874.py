"""
874. 模拟行走机器人
机器人在一个无限大小的网格上行走，从点 (0, 0) 处开始出发，面向北方。该机器人可以接收以下三种类型的命令：

-2：向左转 90 度
-1：向右转 90 度
1 <= x <= 9：向前移动 x 个单位长度
在网格上有一些格子被视为障碍物。

第 i 个障碍物位于网格点  (obstacles[i][0], obstacles[i][1])

机器人无法走到障碍物上，它将会停留在障碍物的前一个网格方块上，但仍然可以继续该路线的其余部分。

返回从原点到机器人所有经过的路径点（坐标为整数）的最大欧式距离的平方。



示例 1：

输入: commands = [4,-1,3], obstacles = []
输出: 25
解释: 机器人将会到达 (3, 4)
示例 2：

输入: commands = [4,-1,4,-2,4], obstacles = [[2,4]]
输出: 65
解释: 机器人在左转走到 (1, 8) 之前将被困在 (1, 4) 处


提示：

0 <= commands.length <= 10000
0 <= obstacles.length <= 10000
-30000 <= obstacle[i][0] <= 30000
-30000 <= obstacle[i][1] <= 30000
答案保证小于 2 ^ 31


解题思路：
1.模拟其行走过程，记录其运动方向（初始向右），移动的路径上有障碍物时，停留在前一个位置，继续移动，最后返回结果
注意事项：建立的是四象限的坐标系；明确东南西北；障碍物查找加速
"""
from typing import List


class Solution:
    def __init__(self):
        # 移动，0：下 南， 1：左 西， 2：上 北， 3：右 东
        self._move = [[0, -1], [-1, 0], [0, 1], [1, 0]]
        self._dir = {0: "DOWN", 1: "LEFT", 2: "UP", 3: "RIGHT"}
        # 方向，对应move，初始向上
        self._direction = 2
        # 在基础方向上，左右转后的方向，1右转，2左转
        self._change = {3: {-1: 0, -2: 2}, 2: {-1: 3, -2: 1}, 1: {-1: 2, -2: 0}, 0: {-1: 1, -2: 3}}
        self._pos = [0, 0]
        self.ans = 0
        # 将坐标转成字符串，存入set中，加速匹配查找速度
        self._obstaclesSet = set()

    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:
        for item in obstacles:
            self._obstaclesSet.add(str(item[0]) + "," + str(item[1]))

        for command in commands:
            if command == -2 or command == -1:
                self._changeDirection(command)
                print(command, "change dir:", self._direction, self._dir[self._direction])
            else:
                self._moveTo(command)
                print(command, "move to:", self._pos)
        return self.ans

    def _changeDirection(self, command):
        self._direction = self._change[self._direction][command]

    def _moveTo(self, step):
        for i in range(0, step):
            movex = self._move[self._direction][0] + self._pos[0]
            movey = self._move[self._direction][1] + self._pos[1]
            key = str(movex) + "," + str(movey)
            if not key in self._obstaclesSet:
                self._pos[0], self._pos[1] = movex, movey
                self.ans = max(self.ans, self._pos[0]**2 + self._pos[1]**2)
            else:
                break


if __name__ == "__main__":
    print(Solution().robotSim(commands=[4, -1, 3], obstacles=[]))
    print(Solution().robotSim(commands=[4, -1, 4, -2, 4], obstacles=[[2, 4]]))
    print(Solution().robotSim(commands=[7, -2, -2, 7, 5],
                              obstacles=[[-3, 2], [-2, 1], [0, 1], [-2, 4], [-1, 0], [-2, -3], [0, -3], [4, 4], [-3, 3],
                                         [2, 2]]))

    commands=[1, 2, -2, 5, -1, -2, -1, 8, 3, -1, 9, 4, -2, 3, 2, 4, 3, 9, 2, -1, -1, -2, 1, 3, -2, 4, 1, 4, -1, 1, 9, -1, -2, 5,
     -1, 5, 5, -2, 6, 6, 7, 7, 2, 8, 9, -1, 7, 4, 6, 9, 9, 9, -1, 5, 1, 3, 3, -1, 5, 9, 7, 4, 8, -1, -2, 1, 3, 2, 9, 3,
     -1, -2, 8, 8, 7, 5, -2, 6, 8, 4, 6, 2, 7, 2, -1, 7, -2, 3, 3, 2, -2, 6, 9, 8, 1, -2, -1, 1, 4, 7]
    obstacles=[[-57, -58], [-72, 91], [-55, 35], [-20, 29], [51, 70], [-61, 88], [-62, 99], [52, 17], [-75, -32], [91, -22],
     [54, 33], [-45, -59], [47, -48], [53, -98], [-91, 83], [81, 12], [-34, -90], [-79, -82], [-15, -86], [-24, 66],
     [-35, 35], [3, 31], [87, 93], [2, -19], [87, -93], [24, -10], [84, -53], [86, 87], [-88, -18], [-51, 89], [96, 66],
     [-77, -94], [-39, -1], [89, 51], [-23, -72], [27, 24], [53, -80], [52, -33], [32, 4], [78, -55], [-25, 18],
     [-23, 47], [79, -5], [-23, -22], [14, -25], [-11, 69], [63, 36], [35, -99], [-24, 82], [-29, -98], [-50, -70],
     [72, 95], [80, 80], [-68, -40], [65, 70], [-92, 78], [-45, -63], [1, 34], [81, 50], [14, 91], [-77, -54],
     [13, -88], [24, 37], [-12, 59], [-48, -62], [57, -22], [-8, 85], [48, 71], [12, 1], [-20, 36], [-32, -14],
     [39, 46], [-41, 75], [13, -23], [98, 10], [-88, 64], [50, 37], [-95, -32], [46, -91], [10, 79], [-11, 43],
     [-94, 98], [79, 42], [51, 71], [4, -30], [2, 74], [4, 10], [61, 98], [57, 98], [46, 43], [-16, 72], [53, -69],
     [54, -96], [22, 0], [-7, 92], [-69, 80], [68, -73], [-24, -92], [-21, 82], [32, -1], [-6, 16], [15, -29],
     [70, -66], [-85, 80], [50, -3], [6, 13], [-30, -98], [-30, 59], [-67, 40], [17, 72], [79, 82], [89, -100], [2, 79],
     [-95, -46], [17, 68], [-46, 81], [-5, -57], [7, 58], [-42, 68], [19, -95], [-17, -76], [81, -86], [79, 78],
     [-82, -67], [6, 0], [35, -16], [98, 83], [-81, 100], [-11, 46], [-21, -38], [-30, -41], [86, 18], [-68, 6],
     [80, 75], [-96, -44], [-19, 66], [21, 84], [-56, -64], [39, -15], [0, 45], [-81, -54], [-66, -93], [-4, 2],
     [-42, -67], [-15, -33], [1, -32], [-74, -24], [7, 18], [-62, 84], [19, 61], [39, 79], [60, -98], [-76, 45],
     [58, -98], [33, 26], [-74, -95], [22, 30], [-68, -62], [-59, 4], [-62, 35], [-78, 80], [-82, 54], [-42, 81],
     [56, -15], [32, -19], [34, 93], [57, -100], [-1, -87], [68, -26], [18, 86], [-55, -19], [-68, -99], [-9, 47],
     [24, 94], [92, 97], [5, 67], [97, -71], [63, -57], [-52, -14], [-86, -78], [-17, 92], [-61, -83], [-84, -10],
     [20, 13], [-68, -47], [7, 28], [66, 89], [-41, -17], [-14, -46], [-72, -91], [4, 52], [-17, -59], [-85, -46],
     [-94, -23], [-48, -3], [-64, -37], [2, 26], [76, 88], [-8, -46], [-19, -68]]
    print(Solution().robotSim(commands, obstacles))
