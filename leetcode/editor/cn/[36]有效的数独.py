# 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。 
# 
#  
#  数字 1-9 在每一行只能出现一次。 
#  数字 1-9 在每一列只能出现一次。 
#  数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。 
#  
# 
#  
# 
#  上图是一个部分填充的有效的数独。 
# 
#  数独部分空格内已填入了数字，空白格用 '.' 表示。 
# 
#  示例 1: 
# 
#  输入:
# [
#   ["5","3",".",".","7",".",".",".","."],
#   ["6",".",".","1","9","5",".",".","."],
#   [".","9","8",".",".",".",".","6","."],
#   ["8",".",".",".","6",".",".",".","3"],
#   ["4",".",".","8",".","3",".",".","1"],
#   ["7",".",".",".","2",".",".",".","6"],
#   [".","6",".",".",".",".","2","8","."],
#   [".",".",".","4","1","9",".",".","5"],
#   [".",".",".",".","8",".",".","7","9"]
# ]
# 输出: true
#  
# 
#  示例 2: 
# 
#  输入:
# [
#   ["8","3",".",".","7",".",".",".","."],
#   ["6",".",".","1","9","5",".",".","."],
#   [".","9","8",".",".",".",".","6","."],
#   ["8",".",".",".","6",".",".",".","3"],
#   ["4",".",".","8",".","3",".",".","1"],
#   ["7",".",".",".","2",".",".",".","6"],
#   [".","6",".",".",".",".","2","8","."],
#   [".",".",".","4","1","9",".",".","5"],
#   [".",".",".",".","8",".",".","7","9"]
# ]
# 输出: false
# 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
#      但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。 
# 
#  说明: 
# 
#  
#  一个有效的数独（部分已被填充）不一定是可解的。 
#  只需要根据以上规则，验证已经填入的数字是否有效即可。 
#  给定数独序列只包含数字 1-9 和字符 '.' 。 
#  给定数独永远是 9x9 形式的。 
#  
#  Related Topics 哈希表 
#  👍 416 👎 0


# leetcode submit region begin(Prohibit modification and deletion)
from typing import List


class Solution:
    """
    解题思路：
    一、暴力直接求解：枚举每一个空格的所有可能值，递归判断是否有效
    用数组、map、set好像都行，数组好像还可以用标记法，感觉应该要快点,不用hash计算，直接下标取值
    因为数据最大9*9，可以看出固定的，所以为O(1)
    """
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        height, width = 9, 9
        rows = [[0] * 10 for _ in range(0, height)]
        cols = [[0] * 10 for _ in range(0, height)]
        boxs = [[0] * 10 for _ in range(0, height)]

        for i in range(0, height):
            for j in range(0, width):
                if board[i][j] == ".":
                    continue
                box = (i // 3) * 3 + j // 3
                num = int(board[i][j])
                print(i, j, num)
                if rows[i][num] == 1 or cols[j][num] == 1 or boxs[box][num] == 1:
                    return False
                rows[i][num] = 1
                cols[j][num] = 1
                boxs[box][num] = 1
        return True


# leetcode submit region end(Prohibit modification and deletion)


if __name__ == "__main__":
    board = [
        ['5', '3', '4', '6', '7', '8', '1', '9', '2'],
        ['6', '7', '2', '1', '9', '5', '3', '4', '8'],
        ['1', '9', '8', '3', '4', '2', '5', '6', '7'],
        ['8', '5', '9', '7', '6', '1', '4', '2', '3'],
        ['4', '2', '6', '8', '5', '3', '9', '7', '1'],
        ['7', '1', '3', '9', '2', '4', '8', '5', '6'],
        ['9', '6', '1', '5', '3', '7', '2', '8', '4'],
        ['2', '8', '7', '4', '1', '9', '6', '3', '5'],
        ['3', '4', '5', '2', '8', '6', '7', '7', '9'],
    ]
    assert Solution().isValidSudoku(board)
